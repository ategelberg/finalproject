best-model <- select(best_acura, model)
best_model <- select(best_acura, model)
View(best_model)
View(best_model)
acuras_15 <- filter(vehicles, make == "Acuras", year == 2015)
best_acura <- filter(acuras_15, hwy == max(hwy))
best_model <- select(best_acura, model)
View(acuras_15)
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
acuras_15 <- filter(vehicles, make == "Acuras", year == 2015)
best_acura <- filter(acuras_15, hwy == max(hwy))
best_model <- select(best_acura, model)
install.packages('devtools')
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
install.packages("devtools")
acuras_15 <- filter(vehicles, make == "Acuras", year == 2015)
best_acura <- filter(acuras_15, hwy == max(hwy))
best_model <- select(best_acura, model)
library(ggplot2)
theme_set(theme_classic())
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
# Source: Categorical variable.
# mpg$class
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
# install.packages("ggplot2")
# load package and data
options(scipen=999)  # turn-off scientific notation like 1e+48
library(ggplot2)
theme_set(theme_bw())  # pre-set the bw theme.
data("midwest", package = "ggplot2")
# midwest <- read.csv("http://goo.gl/G1K41K")  # bkup data source
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
plot(gg)
library(ggplot2)
theme_set(theme_classic())
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
# Source: Categorical variable.
# mpg$class
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
library(ggplot2)
theme_set(theme_bw())
# plot
g <- ggplot(mpg, aes(class, cty))
g + geom_violin() +
labs(title="Violin plot",
subtitle="City Mileage vs Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
library(ggplot2)
theme_set(theme_bw())
# plot
g <- ggplot(mpg, aes(manufacturer, cty))
g + geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
fill="red") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot + Dot plot",
subtitle="City Mileage vs Class: Each dot represents 1 row in source data",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
library(ggplot2)
theme_set(theme_classic())
# Plot
g <- ggplot(mpg, aes(cty))
g + geom_density(aes(fill=factor(cyl)), alpha=0.8) +
labs(title="Density plot",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
knitr::opts_chunk$set(echo = TRUE)
plot(df)
knitr::opts_chunk$set(echo = TRUE)
plot(df)
# install.packages("ggplot2")
# load package and data
options(scipen=999)
library(ggplot2)
theme_set(theme_bw())
data("midwest", package = "ggplot2")
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
plot(gg)
# install.packages("ggplot2")
# load package and data
library(ggplot2)
data("midwest", package = "ggplot2")
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
plot(gg)
library(ggplot2)
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
# Source: Categorical variable.
# mpg$class
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
theme_set(theme_classic())
library(ggplot2)
theme_set(theme_classic())
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
# Source: Categorical variable.
# mpg$class
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
library(ggplot2)
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
library(ggplot2)
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of class",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
library(ggplot2)
theme_set(theme_bw())
# plot
g <- ggplot(mpg, aes(class, cty))
g + geom_violin() +
labs(title="Violin plot",
subtitle="City Mileage vs Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
library(ggplot2)
theme_set(theme_classic())
# Plot
g <- ggplot(mpg, aes(cty))
g + geom_density(aes(fill=factor(cyl)), alpha=0.8) +
labs(title="Plot 5",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
library(ggplot2)
theme_set(theme_bw())
# plot
g <- ggplot(mpg, aes(manufacturer, cty))
g + geom_boxplot() +
geom_dotplot(binaxis='y',
stackdir='center',
dotsize = .5,
fill="red") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Plot 4",
subtitle="City Mileage vs Class: Each dot represents 1 row in source data",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
library(ggplot2)
theme_set(theme_classic())
# Plot
g <- ggplot(mpg, aes(cty))
g + geom_density(aes(fill=factor(cyl)), alpha=0.8) +
labs(title="Plot 5",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
# install.packages("ggplot2")
# load package and data
library(ggplot2)
data("midwest", package = "ggplot2")
# Scatterplot
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Plot 1",
caption = "Source: midwest")
plot(gg)
library(ggplot2)
# Source: Frequency table
df <- as.data.frame(table(mpg$class))
colnames(df) <- c("class", "freq")
pie <- ggplot(df, aes(x = "", y=freq, fill = factor(class))) +
geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Plot 2",
caption="Source: mpg")
pie + coord_polar(theta = "y", start=0)
library(ggplot2)
theme_set(theme_bw())
# plot
g <- ggplot(mpg, aes(class, cty))
g + geom_violin() +
labs(title="Plot 3",
subtitle="City Mileage vs Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
library(ggplot2)
theme_set(theme_classic())
# Plot
g <- ggplot(mpg, aes(cty))
g + geom_density(aes(fill=factor(cyl)), alpha=0.8) +
labs(title="Plot 5",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
source("scripts/Intro.R")
source("scripts/analysis.R")
source("scripts/Intro.R")
#Define UI
ui <- shinyUI(fluidPage(
titlePanel("Near Extinct World Languages"),
p("The total number of contemporary languages in the world is unknown. Language is a vital part of humanity. We use language on a daily basis to communicate with our loved ones, send emails to colleagues and catch up on literature. Language
has the power to connect people from all corners of the globe. It is essential to
ones identity, and almost all communication is expressed through language.
As a group, we decided we wanted to show just how many rare languages have been spoken
on this earth. We wanted people to be able to look at map, find where their ancestors
are from, and look to see the languages spoken in that area. Thus we can help people
keep their language, as well as their culture alive.
The following map shows insights about and the locations today where" total_languages "rare and extinct languages are spoken. By visualizing the location of the language's
origin on a map, people can learn how many people speak it, where is it also spoken
and it's degree of endangerment. Using this information, people can map their ancestry,
taking note of the languages that their ancestors may have been exposed to. People
can then research these languages to learn more about their cultural identity.
The [data](https://www.kaggle.com/the-guardian/extinct-languages/data) we used
to source this map is from Kaggle. This data features" total_languages "different
languages are sorts them into four categories: vulnerable, definitely endangered,
severely endangered, critically endangered, and extinct. As you hover over each
point on the map, information such as number of speakers, and the names of other
countries where this language is spoken will appear under the language name. Using
the tools around the map, users are able to only show specific degrees of endangerment
or just display data for a single country. These tools are useful when users are
trying to look for a language in a specific country or with a specific endangerment level."),
h2("Filter"),
sidebarLayout(
sidebarPanel(
selectInput("filter_countries",
label = "Countries Spoken",
choices = sort(spoken_countries),
selected = "United States of America",
multiple = TRUE),
actionButton("filter_all", "All"),
actionButton("filter_clear", "Clear"),
br(),
sliderTextInput("filter_endangerment",
label = "Degree of Endangerment",
choices = list("Vulnerable" = 1,
"Definately endangered" = 2,
"Severely endangered" = 3,
"Critically endangered" = 4,
"Extinct" = 5),
selected = c(1, 5)),
p(paste0("1: Vulernable, ",
"2: Definitely Endangered, ",
"3: Severely Endangered, ",
"4: Critically Endangered, ",
"5: Extinct")),
br(),
sliderInput("filter_speakers",
label = "Number of Speakers",
min = 0,
max = 7500000,
value = c(0, 7500000)),
br()
),
mainPanel(
plotlyOutput("world_map")
)
))
)
source("scripts/Intro.R")
setwd("~/Documents/Spring 2018/Informatics 201/finalproject")
source("scripts/Intro.R")
library(shiny)
library(shinyWidgets)
#Source analysis file
source("scripts/analysis.R")
source("scripts/Intro.R")
source("scripts/analysis.R")
source("scripts/analysis.R")
source("scripts/analysis.R")
source("scripts/Intro.R")
setwd("~/Documents/Spring 2018/Informatics 201/finalproject")
source("scripts/Intro.R")
#load libraries
library(tidyr)
library(dplyr)
#Source function scripts
source("scripts/coords2country.R")
#Read in data
extinct_lang <- read.csv("data/extinctlanguages.csv", stringsAsFactors = F)
extinct_lang_cities <- read.csv("data/languages_cities.csv", stringsAsFactors = F)
countries<- read.csv(("data/countries.csv"), stringsAsFactors = F)
#merge datasets
extinct_lang_merged <- left_join(extinct_lang, extinct_lang_cities, by = "ID")
extinct_lang$City <- extinct_lang_merged$City
extinct_lang$Country <- extinct_lang_merged$Country
#Unique Endangerment
danger_levels <- unique(extinct_lang$Degree.of.endangerment)
#Adds a column to the dataframe that is the endagerment level as an integer
danger_numbers_temp <- c()
for (i in 1:nrow(extinct_lang)) {
for (j in 1:5) {
if (extinct_lang$Degree.of.endangerment[i] == danger_levels[j]) {
danger_numbers_temp <- c(danger_numbers_temp, j)
}
}
}
extinct_lang$Danger.number <- danger_numbers_temp
#vector of all countries present in countries column
expanded_countries <- expand(extinct_lang, Countries)
#list of each unique country
spoken_countries <- c()
#loop for getting a list of all the individual spoken countries
#goes through every row of the extinct languages dataset
for(i in 1:sapply(expanded_countries, NROW)) {
instance_countries <- strsplit(expanded_countries[[1]][i], ", ")
for(j in 1:sapply(instance_countries, NROW)) {
if (!is.element(j, spoken_countries)) {
spoken_countries <- c(spoken_countries, instance_countries[[1]][j])
}
}
}
#total number of languages
total_lang <- nrow(extinct_lang)
source("scripts/analysis.R")
runApp()
install.packages("shinyWidgets")
runApp()
install.packages("rworldmap")
runApp()
